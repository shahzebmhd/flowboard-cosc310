# FLOWBOARD TDD IMPLEMENTATION PLAN WITH JEST

## OVERVIEW

Implementing Test-Driven Development (TDD) with Jest in the Flowboard project will improve code quality, 
reduce bugs, and make the codebase more maintainable. This plan outlines the steps to integrate Jest 
testing into the existing Next.js and Appwrite-based application.


## IMPLEMENTATION PLAN

### Phase 1: Setup and Infrastructure (1-2 weeks)

1. **Install and Configure Jest**
   ```bash
   npm install --save-dev jest @testing-library/react @testing-library/jest-dom @testing-library/user-event jest-environment-jsdom ts-jest @types/jest
   ```

2. **Create Jest Configuration**
   - Create `jest.config.js` in the project root:
   ```javascript
   const nextJest = require('next/jest');

   const createJestConfig = nextJest({
     dir: './',
   });

   const customJestConfig = {
     setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
     testEnvironment: 'jest-environment-jsdom',
     moduleNameMapper: {
       '^@/(.*)$': '<rootDir>/src/$1',
     },
     collectCoverage: true,
     collectCoverageFrom: [
       'src/**/*.{ts,tsx}',
       '!src/**/*.d.ts',
       '!**/node_modules/**',
     ],
   };

   module.exports = createJestConfig(customJestConfig);
   ```

3. **Create Jest Setup File**
   - Create `jest.setup.js` in the project root:
   ```javascript
   import '@testing-library/jest-dom';
   ```

4. **Update package.json Scripts**
   ```json
   "scripts": {
     "test": "jest",
     "test:watch": "jest --watch",
     "test:coverage": "jest --coverage"
   }
   ```

5. **Create Mock Service for Appwrite**
   - Create `src/__mocks__/appwrite.ts` to mock Appwrite services
   - Implement mock functions for all Appwrite services used in the application

6. **Setup Test Directory Structure**
   ```
   src/
   ├── __tests__/
   │   ├── components/
   │   │   ├── auth/
   │   │   ├── workspaces/
   │   │   ├── projects/
   │   │   ├── tasks/
   │   │   └── members/
   │   └── lib/
   ```


### Phase 2: Create Test Utilities (1 week)

1. **Create Test Providers**
   - Create a wrapper component that provides all necessary context providers:
   ```typescript
   // src/__tests__/utils/providers.tsx
   import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
   import { ReactNode } from 'react';

   export function createTestQueryClient() {
     return new QueryClient({
       defaultOptions: {
         queries: {
           retry: false,
         },
       },
     });
   }

   export function TestProviders({ children }: { children: ReactNode }) {
     const client = createTestQueryClient();
     
     return (
       <QueryClientProvider client={client}>
         {children}
       </QueryClientProvider>
     );
   }
   ```

2. **Create Test Fixtures**
   - Create sample data for testing:
   ```typescript
   // src/__tests__/utils/fixtures.ts
   export const mockUser = {
     $id: 'user-1',
     name: 'Test User',
     email: 'test@example.com',
   };

   export const mockWorkspace = {
     $id: 'workspace-1',
     name: 'Test Workspace',
     ImageUrl: 'https://example.com/image.png',
     inviteCode: 'ABC123',
     userId: 'user-1',
   };

   // Add more fixtures for projects, tasks, members, etc.
   ```

3. **Create Test Helpers**
   - Create utility functions for common testing tasks:
   ```typescript
   // src/__tests__/utils/helpers.tsx
   import { render } from '@testing-library/react';
   import { TestProviders } from './providers';

   export function renderWithProviders(ui: React.ReactElement) {
     return render(ui, { wrapper: TestProviders });
   }
   ```


### Phase 3: Write Unit Tests for Core Functionality (2-3 weeks)

1. **Test UI Components**
   - Start with basic UI components in `src/components/ui/`
   - Example test for Button component:
   ```typescript
   // src/__tests__/components/ui/button.test.tsx
   import { render, screen } from '@testing-library/react';
   import userEvent from '@testing-library/user-event';
   import { Button } from '@/components/ui/button';

   describe('Button', () => {
     it('renders correctly', () => {
       render(<Button>Click me</Button>);
       expect(screen.getByRole('button', { name: /click me/i })).toBeInTheDocument();
     });

     it('calls onClick when clicked', async () => {
       const handleClick = jest.fn();
       render(<Button onClick={handleClick}>Click me</Button>);
       await userEvent.click(screen.getByRole('button', { name: /click me/i }));
       expect(handleClick).toHaveBeenCalledTimes(1);
     });

     it('applies variant classes correctly', () => {
       render(<Button variant="destructive">Delete</Button>);
       const button = screen.getByRole('button', { name: /delete/i });
       expect(button).toHaveClass('bg-destructive');
     });
   });
   ```

2. **Test Utility Functions**
   - Test functions in `src/lib/utils.ts`
   - Example test for `cn` function:
   ```typescript
   // src/__tests__/lib/utils.test.ts
   import { cn, generateInviteCode } from '@/lib/utils';

   describe('cn', () => {
     it('merges class names correctly', () => {
       expect(cn('class1', 'class2')).toBe('class1 class2');
       expect(cn('class1', null, undefined, 'class2')).toBe('class1 class2');
       expect(cn('class1', false && 'class2', true && 'class3')).toBe('class1 class3');
     });
   });

   describe('generateInviteCode', () => {
     it('generates a code of the specified length', () => {
       const code = generateInviteCode(6);
       expect(code.length).toBe(6);
     });

     it('generates only alphanumeric characters', () => {
       const code = generateInviteCode(10);
       expect(code).toMatch(/^[a-zA-Z0-9]+$/);
     });
   });
   ```

3. **Test Form Validation**
   - Test validation schemas in each feature
   - Example test for auth schemas:
   ```typescript
   // src/__tests__/features/auth/schemas.test.ts
   import { loginSchema, registerSchema } from '@/features/auth/schemas';

   describe('loginSchema', () => {
     it('validates valid login data', () => {
       const validData = { email: 'test@example.com', password: 'password123' };
       const result = loginSchema.safeParse(validData);
       expect(result.success).toBe(true);
     });

     it('rejects invalid email', () => {
       const invalidData = { email: 'not-an-email', password: 'password123' };
       const result = loginSchema.safeParse(invalidData);
       expect(result.success).toBe(false);
     });

     it('rejects empty password', () => {
       const invalidData = { email: 'test@example.com', password: '' };
       const result = loginSchema.safeParse(invalidData);
       expect(result.success).toBe(false);
     });
   });
   ```


### Phase 4: Write Integration Tests for Features (3-4 weeks)

1. **Test Authentication Flow**
   - Test sign-in and sign-up components
   - Test authentication hooks and API calls
   - Example test for sign-in form:
   ```typescript
   // src/__tests__/features/auth/components/sign-in-form.test.tsx
   import { render, screen, waitFor } from '@testing-library/react';
   import userEvent from '@testing-library/user-event';
   import { SignInForm } from '@/features/auth/components/sign-in-form';
   import { renderWithProviders } from '@/__tests__/utils/helpers';
   import * as authApi from '@/features/auth/api/use-sign-in';

   jest.mock('@/features/auth/api/use-sign-in');

   describe('SignInForm', () => {
     it('submits the form with valid data', async () => {
       const mockSignIn = jest.fn();
       jest.spyOn(authApi, 'useSignIn').mockReturnValue({
         mutate: mockSignIn,
         isPending: false,
         isError: false,
         error: null,
       });

       renderWithProviders(<SignInForm />);
       
       await userEvent.type(screen.getByLabelText(/email/i), 'test@example.com');
       await userEvent.type(screen.getByLabelText(/password/i), 'password123');
       await userEvent.click(screen.getByRole('button', { name: /sign in/i }));
       
       await waitFor(() => {
         expect(mockSignIn).toHaveBeenCalledWith({
           json: { email: 'test@example.com', password: 'password123' }
         });
       });
     });

     it('shows validation errors for invalid data', async () => {
       renderWithProviders(<SignInForm />);
       
       await userEvent.type(screen.getByLabelText(/email/i), 'not-an-email');
       await userEvent.click(screen.getByRole('button', { name: /sign in/i }));
       
       await waitFor(() => {
         expect(screen.getByText(/invalid email/i)).toBeInTheDocument();
       });
     });
   });
   ```

2. **Test Workspace Management**
   - Test workspace creation, listing, and joining
   - Test workspace API calls and hooks

3. **Test Project Management**
   - Test project creation, updating, and deletion
   - Test project API calls and hooks

4. **Test Task Management**
   - Test task creation, updating, and filtering
   - Test DataTable component and its functionality

5. **Test Member Management**
   - Test member listing and role management
   - Test member API calls and hooks


### Phase 5: Write End-to-End Tests (2-3 weeks)

1. **Install and Configure Cypress**
   ```bash
   npm install --save-dev cypress
   ```

2. **Create Cypress Configuration**
   - Create `cypress.config.js` in the project root

3. **Create End-to-End Test Scenarios**
   - User registration and login
   - Workspace creation and management
   - Project creation and management
   - Task creation and management
   - Member invitation and role management

4. **Implement CI/CD Integration**
   - Configure GitHub Actions to run tests on pull requests
   - Set up test coverage reporting


### Phase 6: Implement Test-Driven Development Process (Ongoing)

1. **Establish TDD Workflow**
   - Write failing test first
   - Implement minimal code to pass the test
   - Refactor code while keeping tests passing

2. **Create Test Templates**
   - Create templates for different types of tests to ensure consistency

3. **Set Coverage Targets**
   - Aim for at least 80% code coverage
   - Focus on critical business logic and UI components

4. **Integrate Testing into Code Review Process**
   - Require tests for all new features
   - Ensure tests pass before merging pull requests


## TIMELINE AND RESOURCES

### Timeline
- Phase 1 (Setup): 1-2 weeks
- Phase 2 (Test Utilities): 1 week
- Phase 3 (Unit Tests): 2-3 weeks
- Phase 4 (Integration Tests): 3-4 weeks
- Phase 5 (E2E Tests): 2-3 weeks
- Phase 6 (TDD Process): Ongoing

### Resources Needed
- Developer time: 1-2 developers dedicated to setting up the testing infrastructure
- Training: Workshop on Jest and Testing Library for the team
- Documentation: Testing guidelines and best practices document


## EXPECTED OUTCOMES

1. **Improved Code Quality**
   - Fewer bugs in production
   - More maintainable codebase

2. **Better Developer Experience**
   - Faster feedback loop during development
   - Confidence when refactoring code

3. **Documentation Through Tests**
   - Tests serve as documentation for how components should behave
   - New team members can understand the codebase more quickly

4. **Regression Prevention**
   - Automated tests catch regressions before they reach production
   - Reduced manual testing effort


## CONCLUSION

Implementing TDD with Jest in the Flowboard project will require an initial investment of time and resources, 
but will pay dividends in code quality, developer productivity, and application stability. By following 
this phased approach, we can gradually build up our test suite while continuing to deliver features. 